 Id : 1 IdNode : 0
 Id : 5 IdNode : 1
 Id : 4 IdNode : 2
 Id : 0 IdNode : 3
 Id : 2 IdNode : 4
 Id : 3 IdNode : 5
Entrou no 3
Entrou no 3
Entrou no 3
Entrou no 3
Cluster: 0 Id: 3
Cluster: 1 Id: 2
Cluster: 2 Id: 1
Cluster: 3 Id: 4
 Vertice atual: 5
Peso atual: 8
Valor do gap atual: 0
Valor do gapNode: 1
Valos do gapFinal: 0.333333
 Vertice atual: 0
Peso atual: 2
Valor do gap atual: 0
Valor do gapNode: 5
Valos do gapFinal: 1.25
Gap do node 5 e: 0.333333
Gap do node 0 e: 1.25
Valor do cont: 0
SET COR !  Vertice : 5 Cor : 0
Id da aresta: 1
Id da aresta: 0
Id da aresta: 4
 POSICAONODE : 0
 Visitado  true
 Vertice : 5 .getInDegree()3
 PRINTADO O VERTICE QUE GRAU 1 : 1
Começo do vectorWeightEdge: 5
i :0VectorNode: 3
i :0VectorNode: 5
 Vertice atual: 0
Peso atual: 2
Valor do gap atual: 0
Valor do gapNode: 0
Valos do gapFinal: 0
Gap do node 0 e: 0
Valor do cont: 0
SET COR !  Vertice : 0 Cor : 1
Id da aresta: 4
Id da aresta: 5
Id da aresta: 2
Id da aresta: 3
 POSICAONODE : 2
 Visitado  true
 Vertice : 0 .getInDegree()4
 PRINTADO O VERTICE QUE GRAU 1 : 4
Começo do vectorWeightEdge: 0
i :1VectorNode: 2
i :1VectorNode: 0
Valor do cont: 0
Valor do cont: 0
Id dos nodes: 1 Peso dos nodes: 4 Cores dos nodes: 2
Id dos nodes: 5 Peso dos nodes: 8 Cores dos nodes: 0
Id dos nodes: 4 Peso dos nodes: 1 Cores dos nodes: 3
Id dos nodes: 0 Peso dos nodes: 2 Cores dos nodes: 1
Id dos nodes: 2 Peso dos nodes: 2 Cores dos nodes: 1
Id dos nodes: 3 Peso dos nodes: 7 Cores dos nodes: 0
 vectorNode.at(0). at (0) = 3
 vectorNode.at(0). at (1) = 5

 vectorNode.at(1). at (0) = 2
 vectorNode.at(1). at (1) = 0
I: 0Maior Valor de cada cluster: 8 Menor Valor: 7
I: 1Maior Valor de cada cluster: 2 Menor Valor: 2
I: 2Maior Valor de cada cluster: 4 Menor Valor: 4
I: 3Maior Valor de cada cluster: 1 Menor Valor: 1
TESTANDO TAMANHO:  4
 i  = 0 Id 3 Cor : 0
 i  = 0 Id 5 Cor : 0
 i  = 1 Id 2 Cor : 1
 i  = 1 Id 0 Cor : 1
 i  = 2 Id 1 Cor : 2
 i  = 3 Id 4 Cor : 3
TESTANDO TAMANHO2:  4
Começando o i: 0
  i : 0
vetorClusterNodes->at(0).at(0) :  3
Dando erase: 3
  vetorClusterNodes->at(k).at(j).getId() :  3
TesteTriste vizinho  : 2COR : 1
TesteTriste vizinho  : 0COR : 1
 TAMANHAO K 6
  vetorClusterNodes->at(k).at(j).getId() :  5
TesteTriste vizinho  : 1COR : 2
TesteTriste vizinho  : 0COR : 1
TesteTriste vizinho  : 4COR : 3
TESTANDO TAMANHO 3:  4
K: 0 Maior Valor: 7 Menor valor: 7
K: 1 Maior Valor: 8 Menor valor: 8
maiorSubCluster vale: 1
Entrou quantas x
Entrou quantas x
Gap da posicao escolhida = 0
Posicao escolhida = 0
Cores: false
Cores: true
Cores: true
Cores: true
Size coresPossiveis: 2
Entrou quantas x 
Node atual: 5
Id do vizinho: 1
Bahia corNode: true
Entrou 1: 
Entrou 2: 
Cor atual:2
Super teste: 4
Super teste 2: 4
Valor atual 1: 8
Valor atual 2: 8
Entrou 3
Tamanho mudou: 4
Node: 1
Valor: 8
Maior da list: 4
Testando: 2
Cor: 2
Entrou 5
Testando valor gap: 4
Valor do gap agora:  1000000
Entrou no 2 uau
Valor do z que entrou: 0
Id do vizinho: 0
Bahia corNode: true
Entrou 1: 
Entrou 2: 
Cor atual:1
Super teste: 2
Super teste 2: 2
Valor atual 1: 8
Valor atual 2: 8
Entrou 3
Tamanho mudou: 4
Node: 0
Valor: 8
Maior da list: 2
Testando: 2
Cor: 1
Entrou 5
Testando valor gap: 6
Valor do gap agora:  4
Id do vizinho: 4
Bahia corNode: true
Entrou 1: 
Entrou 2: 
Cor atual:3
Super teste: 1
Super teste 2: 1
Valor atual 1: 8
Valor atual 2: 8
Entrou 3
Tamanho mudou: 4
Node: 4
Valor: 8
Maior da list: 1
Testando: 2
Cor: 3
Entrou 5
Testando valor gap: 7
Valor do gap agora:  4
Valor do e: 1
Testando front: 0
testando back: 1
Tamanho desse vet: 6
coresPossiveis->size(): 1
vetorClusterNudes->at(1).size(): 1
Entradas: 1
coresPossiveis->at(0).front(): 4
coresPossiveis->at(0).back(): 2
Rodous quantas x: 
Valor do menor: 4
Id que eu quero descobrir: 5
Cor do node: 5é: 2
Uma x
duas x
tres x
contSelecionado: 0
entrou 2
Chegou a sair
Valores desse vet dessa cor: 1
Valores desse vet dessa cor: 5
Depois disso aqui: 
Vector 1: 2
Vector 1: 0
Vector 2: 1
Vector 2: 5
Vector 3: 4
Maior por enquanto: 8 Menor por enquanto: 7
Maior por enquanto: 2 Menor por enquanto: 2
Maior por enquanto: 8 Menor por enquanto: 4
Maior por enquanto: 1 Menor por enquanto: 1
Teste pra isso I: 0Maior peso: 7 Menor peso: 7
Teste
Teste 2
Valor do i: 0
Entrou
vetorClusterNodes.size()  2
vetorClusterNodes->at(0).size()  1
 Kluster : 0 Valor : 3
Começando o i: 1
  i : 1
vetorClusterNodes->at(0).at(0) :  2
Dando erase: 2
  vetorClusterNodes->at(k).at(j).getId() :  2
TesteTriste vizinho  : 0COR : 1
 node :   2 COR : 1
 vizinho  : 0COR : 1
TesteTriste vizinho  : 3COR : 0
TesteTriste vizinho  : 4COR : 3
K: 0 Node sendo excluido: 0
  vetorClusterNodes->at(k).at(j).getId() :  0
TesteTriste vizinho  : 4COR : 3
TesteTriste vizinho  : 5COR : 2
TesteTriste vizinho  : 2COR : 1
TesteTriste vizinho  : 3COR : 0
TESTANDO TAMANHO 3:  4
K: 0 Maior Valor: 2 Menor valor: 2
maiorSubCluster vale: 2
Entrou quantas x
Gap da posicao escolhida = 0
Posicao escolhida = 0
Cores: true
Cores: false
Cores: true
Cores: true
Size coresPossiveis: 2
Depois disso aqui: 
Vector 2: 1
Vector 2: 5
Vector 3: 4
Maior por enquanto: 7 Menor por enquanto: 7
Maior por enquanto: 2 Menor por enquanto: 2
Maior por enquanto: 8 Menor por enquanto: 4
Maior por enquanto: 1 Menor por enquanto: 1
Teste pra isso I: 1Maior peso: 2 Menor peso: 2
Teste
Teste 2
Valor do i: 1
Começando o i: 2
  i : 2
vetorClusterNodes->at(0).at(0) :  1
Dando erase: 1
  vetorClusterNodes->at(k).at(j).getId() :  1
TesteTriste vizinho  : 5COR : 2
 node :   1 COR : 2
 vizinho  : 5COR : 2
TesteTriste vizinho  : 4COR : 3
K: 0 Node sendo excluido: 5
  vetorClusterNodes->at(k).at(j).getId() :  5
TesteTriste vizinho  : 1COR : 2
TesteTriste vizinho  : 0COR : 1
TesteTriste vizinho  : 4COR : 3
TESTANDO TAMANHO 3:  4
K: 0 Maior Valor: 8 Menor valor: 4
maiorSubCluster vale: 2
Entrou quantas x
Gap da posicao escolhida = 4
Posicao escolhida = 0
Cores: true
Cores: true
Cores: false
Cores: true
Size coresPossiveis: 2
Depois disso aqui: 
Vector 3: 4
Maior por enquanto: 7 Menor por enquanto: 7
Maior por enquanto: 2 Menor por enquanto: 2
Maior por enquanto: 8 Menor por enquanto: 4
Maior por enquanto: 1 Menor por enquanto: 1
Teste pra isso I: 2Maior peso: 8 Menor peso: 4
Teste
Teste 2
Valor do i: 2
Começando o i: 3
  i : 3
vetorClusterNodes->at(0).at(0) :  4
Dando erase: 4
  vetorClusterNodes->at(k).at(j).getId() :  4
TesteTriste vizinho  : 1COR : 2
TesteTriste vizinho  : 0COR : 1
TesteTriste vizinho  : 5COR : 2
TesteTriste vizinho  : 2COR : 1
TESTANDO TAMANHO 3:  4
K: 0 Maior Valor: 1 Menor valor: 1
maiorSubCluster vale: 1
Entrou quantas x
Gap da posicao escolhida = 0
Posicao escolhida = 0
Cores: true
Cores: true
Cores: true
Cores: false
Size coresPossiveis: 2
Depois disso aqui: 
Maior por enquanto: 7 Menor por enquanto: 7
Maior por enquanto: 2 Menor por enquanto: 2
Maior por enquanto: 8 Menor por enquanto: 4
Maior por enquanto: 1 Menor por enquanto: 1
Teste pra isso I: 3Maior peso: 1 Menor peso: 1
Teste
Teste 2
Valor do i: 3
Chegou a sair 
Chegou aqui 
Testando gap final: 4
Cluster é: 0
Cor do node: 0 Id do node: 3 Peso: 7
Maior dessa posicao: 7 Menor dessa posicao: 7
Gap dessa posicao: 0
Cluster é: 1
Cor do node: 1 Id do node: 0 Peso: 2
Cor do node: 1 Id do node: 2 Peso: 2
Maior dessa posicao: 2 Menor dessa posicao: 2
Gap dessa posicao: 0
Cluster é: 2
Cor do node: 2 Id do node: 1 Peso: 4
Cor do node: 2 Id do node: 5 Peso: 8
Maior dessa posicao: 8 Menor dessa posicao: 4
Gap dessa posicao: 4
Cluster é: 3
Cor do node: 3 Id do node: 4 Peso: 1
Maior dessa posicao: 1 Menor dessa posicao: 1
Gap dessa posicao: 0
saiu


Saiu pq?: 0
